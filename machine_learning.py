# -*- coding: utf-8 -*-
"""Machine_Learning.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iWnK31DZPNy_rCb7B8lrRZNnJ3sAwGqR
"""

from google.colab import drive
drive.mount('/gdrive')

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import re
# %matplotlib inline

# path = '/gdrive/My Drive/titanicML/'
# train = pd.read_csv(path + 'train.csv')

train = pd.read_csv('train.csv')
train.head(10)

IDcol = train['PassengerId'].astype('int32').dtypes

train = train.drop(columns= ['PassengerId'])
train = train.drop(columns= ['Name'])
train = train.drop(columns =['Cabin'])
train = train.drop(columns =['Ticket'])
train.head(30)

train.isnull().sum()# each colum number of null values

train.count()

bftype = train.dtypes# Types of columns
bftype

sns.heatmap(train.isnull())

sns.countplot(x='Survived',data=train)

sns.countplot(x='Survived',hue='Sex',data=train)

sns.countplot(x='Survived',hue='Pclass',data=train)

plt.figure(figsize=(12, 7))
sns.boxplot(x='Pclass',y='Age',data=train,palette='winter')

def impute_age(cols):
    Age = cols[0]
    Pclass = cols[1]

    if pd.isnull(Age):
      if Pclass == 1:
        return 37
      elif Pclass == 2:
        return 29
      else:
        return 24
    else:
        return Age

train['Age'] = train[['Age','Pclass']].apply(impute_age,axis=1)

train.isnull().sum()

sns.countplot(x='Survived',hue='Embarked',data=train)

# print(train[train.isnull().any(axis=1)][null_columns].head())

train['Embarked'].fillna((train['Embarked'].mode()[0]),inplace=True)
train['Embarked'] = train['Embarked'].astype('category')
train['Sex'] = train['Sex'].astype('category')
train.count()

train.head(63)

bftype = train.dtypes# Types of columns
bftype

from sklearn.preprocessing import LabelEncoder

se = LabelEncoder()
train['Sex'] = se.fit_transform(train['Sex'])

ee = LabelEncoder()
train['Embarked'] = ee.fit_transform(train['Embarked'])
train.head()

target = train['Survived']
train = train.drop(columns = ['Survived'])

train.head()

from sklearn.ensemble import RandomForestClassifier

model_rf = RandomForestClassifier(oob_score = True, max_features = 'auto', n_estimators = 100, min_samples_leaf = 2, random_state = 2)

pd.isnull(train).sum() > 0

model_rf.fit(train, target)

yp = model_rf.predict(train)

from sklearn.metrics import accuracy_score
acc = accuracy_score(target, yp)
print(acc)

test = pd.read_csv(path + 'test.csv')
test.head()

IDcol = test['PassengerId'].astype('int32').dtypes

test = test.drop(columns= ['PassengerId'])
test = test.drop(columns= ['Name'])
test = test.drop(columns =['Cabin'])
test = test.drop(columns =['Ticket'])
test.head(30)

def impute_age(cols):
    Age = cols[0]
    Pclass = cols[1]

    if pd.isnull(Age):
      if Pclass == 1:
        return 37
      elif Pclass == 2:
        return 29
      else:
        return 24
    else:
        return Age

test['Age'] = test[['Age','Pclass']].apply(impute_age,axis=1)

"""test['Embarked'].fillna((test['Embarked'].mode()[0]),inplace=True)
test['Embarked'] = test['Embarked'].astype('category')
test['Sex'] = test['Sex'].astype('category')
test.count()

"""

from sklearn.preprocessing import LabelEncoder

se = LabelEncoder()
test['Sex'] = se.fit_transform(test['Sex'])

ee = LabelEncoder()
test['Embarked'] = ee.fit_transform(test['Embarked'])
test.head(10)

fe = LabelEncoder()
test['Fare'] = fe.fit_transform(test['Fare'])

bftype = test.dtypes# Types of columns
bftype

train.isnull().sum()

np.isnan(test.any()) #and gets False
np.isfinite(test.all()) #and gets True

pred = model_rf.predict(test)

pp = pd.DataFrame(pred)

pp.to_csv('Final_Soln.csv', index = False)